use std::fs; 
use assert_cmd::Command;
use predicates::prelude::*;

#[test]
fn dies_no_args() { 

    let mut cmd = Command::cargo_bin("echor").unwrap();

    // run the program with NO ARGS
    // and assert that it failes and print a usage statement to STDERR
    cmd.assert()
       .failure()
       .stderr(predicate::str::contains("USAGE"));

}

#[test]
fn runs() {
    let mut cmd = Command::cargo_bin("echor").unwrap();
    cmd.arg("hello") // run `echor` with the argument "hello"
       .assert().success(); // verify that it EXITS successfully
}

#[test]
fn hello1() { 
    let outfile = "tests/expected/hello1.txt"; // generated by mk-out.sh
    let expected = fs::read_to_string(outfile).unwrap();
    let mut cmd = Command::cargo_bin("echor").unwrap();
    // run the program with the given argument
    cmd.arg("Hello there")
    // and ensure it exit correctly with the expected output. 
    .assert().success() 
    .stdout(expected); 
}
